//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Game/Framework/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""ecf3d993-1f77-47de-9f72-928b190684a5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""aa59e8ab-d481-430a-b729-b1cefcda5d30"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""608f1c66-6de2-4229-9f1c-89fb41278b86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""d4063308-91fb-4f42-a536-21a3139bc9dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b6edd69c-c632-4934-982e-a4c2dc107c67"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""0b8295c5-9863-48c8-b05c-e372b66f8725"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""788feeb7-afb7-4c7f-bb9c-06056d5375c6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""11f98f05-a2dc-4e5e-9d01-a637c4ed759b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""7810cbe1-864a-4b65-bed4-08666f1be01a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""4765bea8-b93e-4862-9746-f6d933d47226"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""29b161b0-2b85-47cb-af70-12c073adce07"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""df592cc5-bc16-4b88-b8c3-8264422dd95f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3ecc0dca-792f-444c-a286-feefd10746e0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba66dd6e-ecd0-4bea-87e8-06ec45866f06"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ad6b52d-3670-4377-97f3-3b854b21b0af"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""eb67d51b-af34-4e2d-a30b-4a7ffcd075b7"",
            ""actions"": [
                {
                    ""name"": ""ToggleVintage"",
                    ""type"": ""Button"",
                    ""id"": ""31bb369d-e313-426f-bb31-95e8610ddddb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""18fec9f8-7981-4adf-a0fe-dbf3880ef58e"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleVintage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""afb7bce0-c9d6-4ac4-a059-28ea7af9062e"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f685cb82-a5d1-457b-af5e-4a307576fc03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTarget"",
                    ""type"": ""Button"",
                    ""id"": ""333985d7-186d-4841-9298-d598c0369e9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""57bb2c90-beb5-4618-8402-d456ec071f31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""9508db55-04af-4561-8883-36ec00470580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""910d0d46-61ff-4bc8-b64b-6cbf991edb16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire(click)"",
                    ""type"": ""Button"",
                    ""id"": ""075aeee8-82fb-45b3-9fee-bc9326381281"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""98e50eec-019b-426a-aef7-02e2b5d3793a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""fdc7ec7c-6589-41f1-b035-facb68a91859"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ac697c3-7a35-4357-9d96-4b50173a8dd2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98c2fcfd-1d29-4e9a-a950-30ff42d74db9"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a057172-f6dc-4485-bf36-57c1ed15375b"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4fcc61f-2712-432d-af10-ece0ad101fc3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f47f7451-0ade-4197-8a2a-b9718e08984c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""744c2349-3640-4a1c-825a-698793a644d4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire(click)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c3dfdfa-9f4e-40d3-9eb4-ae299f02341d"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46ba52c8-6db3-45f8-97da-e3f29128c544"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pedia"",
            ""id"": ""37e20571-e9d3-4964-afad-4281f45f754c"",
            ""actions"": [
                {
                    ""name"": ""PageUp"",
                    ""type"": ""Button"",
                    ""id"": ""ee7629ca-ed50-4b4d-9c55-fb93cded3f09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PageDown"",
                    ""type"": ""Button"",
                    ""id"": ""6acd7bd8-6f98-4554-864b-97f78c2ab2cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4b9e0519-f12f-476a-8286-a5fd6769afa9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PageUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dc4dd8a-fd4b-4a5f-a0f9-1fce4942d5c9"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PageDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Move = m_PlayerMovement.FindAction("Move", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovement_Sprint = m_PlayerMovement.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerMovement_Look = m_PlayerMovement.FindAction("Look", throwIfNotFound: true);
        m_PlayerMovement_Crouch = m_PlayerMovement.FindAction("Crouch", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_ToggleVintage = m_Debug.FindAction("ToggleVintage", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Interact = m_Interaction.FindAction("Interact", throwIfNotFound: true);
        m_Interaction_ChangeTarget = m_Interaction.FindAction("ChangeTarget", throwIfNotFound: true);
        m_Interaction_Cancel = m_Interaction.FindAction("Cancel", throwIfNotFound: true);
        m_Interaction_Release = m_Interaction.FindAction("Release", throwIfNotFound: true);
        m_Interaction_Menu = m_Interaction.FindAction("Menu", throwIfNotFound: true);
        m_Interaction_Fireclick = m_Interaction.FindAction("Fire(click)", throwIfNotFound: true);
        m_Interaction_Drop = m_Interaction.FindAction("Drop", throwIfNotFound: true);
        m_Interaction_Grapple = m_Interaction.FindAction("Grapple", throwIfNotFound: true);
        // Pedia
        m_Pedia = asset.FindActionMap("Pedia", throwIfNotFound: true);
        m_Pedia_PageUp = m_Pedia.FindAction("PageUp", throwIfNotFound: true);
        m_Pedia_PageDown = m_Pedia.FindAction("PageDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Move;
    private readonly InputAction m_PlayerMovement_Jump;
    private readonly InputAction m_PlayerMovement_Sprint;
    private readonly InputAction m_PlayerMovement_Look;
    private readonly InputAction m_PlayerMovement_Crouch;
    public struct PlayerMovementActions
    {
        private @GameInput m_Wrapper;
        public PlayerMovementActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMovement_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputAction @Sprint => m_Wrapper.m_PlayerMovement_Sprint;
        public InputAction @Look => m_Wrapper.m_PlayerMovement_Look;
        public InputAction @Crouch => m_Wrapper.m_PlayerMovement_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnJump;
                @Sprint.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSprint;
                @Look.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @Crouch.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCrouch;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_ToggleVintage;
    public struct DebugActions
    {
        private @GameInput m_Wrapper;
        public DebugActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleVintage => m_Wrapper.m_Debug_ToggleVintage;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @ToggleVintage.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleVintage;
                @ToggleVintage.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleVintage;
                @ToggleVintage.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnToggleVintage;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleVintage.started += instance.OnToggleVintage;
                @ToggleVintage.performed += instance.OnToggleVintage;
                @ToggleVintage.canceled += instance.OnToggleVintage;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private IInteractionActions m_InteractionActionsCallbackInterface;
    private readonly InputAction m_Interaction_Interact;
    private readonly InputAction m_Interaction_ChangeTarget;
    private readonly InputAction m_Interaction_Cancel;
    private readonly InputAction m_Interaction_Release;
    private readonly InputAction m_Interaction_Menu;
    private readonly InputAction m_Interaction_Fireclick;
    private readonly InputAction m_Interaction_Drop;
    private readonly InputAction m_Interaction_Grapple;
    public struct InteractionActions
    {
        private @GameInput m_Wrapper;
        public InteractionActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interaction_Interact;
        public InputAction @ChangeTarget => m_Wrapper.m_Interaction_ChangeTarget;
        public InputAction @Cancel => m_Wrapper.m_Interaction_Cancel;
        public InputAction @Release => m_Wrapper.m_Interaction_Release;
        public InputAction @Menu => m_Wrapper.m_Interaction_Menu;
        public InputAction @Fireclick => m_Wrapper.m_Interaction_Fireclick;
        public InputAction @Drop => m_Wrapper.m_Interaction_Drop;
        public InputAction @Grapple => m_Wrapper.m_Interaction_Grapple;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnInteract;
                @ChangeTarget.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnChangeTarget;
                @ChangeTarget.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnChangeTarget;
                @ChangeTarget.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnChangeTarget;
                @Cancel.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnCancel;
                @Release.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnRelease;
                @Release.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnRelease;
                @Release.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnRelease;
                @Menu.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnMenu;
                @Fireclick.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnFireclick;
                @Fireclick.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnFireclick;
                @Fireclick.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnFireclick;
                @Drop.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnDrop;
                @Grapple.started -= m_Wrapper.m_InteractionActionsCallbackInterface.OnGrapple;
                @Grapple.performed -= m_Wrapper.m_InteractionActionsCallbackInterface.OnGrapple;
                @Grapple.canceled -= m_Wrapper.m_InteractionActionsCallbackInterface.OnGrapple;
            }
            m_Wrapper.m_InteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @ChangeTarget.started += instance.OnChangeTarget;
                @ChangeTarget.performed += instance.OnChangeTarget;
                @ChangeTarget.canceled += instance.OnChangeTarget;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Release.started += instance.OnRelease;
                @Release.performed += instance.OnRelease;
                @Release.canceled += instance.OnRelease;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @Fireclick.started += instance.OnFireclick;
                @Fireclick.performed += instance.OnFireclick;
                @Fireclick.canceled += instance.OnFireclick;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Grapple.started += instance.OnGrapple;
                @Grapple.performed += instance.OnGrapple;
                @Grapple.canceled += instance.OnGrapple;
            }
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);

    // Pedia
    private readonly InputActionMap m_Pedia;
    private IPediaActions m_PediaActionsCallbackInterface;
    private readonly InputAction m_Pedia_PageUp;
    private readonly InputAction m_Pedia_PageDown;
    public struct PediaActions
    {
        private @GameInput m_Wrapper;
        public PediaActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PageUp => m_Wrapper.m_Pedia_PageUp;
        public InputAction @PageDown => m_Wrapper.m_Pedia_PageDown;
        public InputActionMap Get() { return m_Wrapper.m_Pedia; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PediaActions set) { return set.Get(); }
        public void SetCallbacks(IPediaActions instance)
        {
            if (m_Wrapper.m_PediaActionsCallbackInterface != null)
            {
                @PageUp.started -= m_Wrapper.m_PediaActionsCallbackInterface.OnPageUp;
                @PageUp.performed -= m_Wrapper.m_PediaActionsCallbackInterface.OnPageUp;
                @PageUp.canceled -= m_Wrapper.m_PediaActionsCallbackInterface.OnPageUp;
                @PageDown.started -= m_Wrapper.m_PediaActionsCallbackInterface.OnPageDown;
                @PageDown.performed -= m_Wrapper.m_PediaActionsCallbackInterface.OnPageDown;
                @PageDown.canceled -= m_Wrapper.m_PediaActionsCallbackInterface.OnPageDown;
            }
            m_Wrapper.m_PediaActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PageUp.started += instance.OnPageUp;
                @PageUp.performed += instance.OnPageUp;
                @PageUp.canceled += instance.OnPageUp;
                @PageDown.started += instance.OnPageDown;
                @PageDown.performed += instance.OnPageDown;
                @PageDown.canceled += instance.OnPageDown;
            }
        }
    }
    public PediaActions @Pedia => new PediaActions(this);
    public interface IPlayerMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnToggleVintage(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnChangeTarget(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnFireclick(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
    }
    public interface IPediaActions
    {
        void OnPageUp(InputAction.CallbackContext context);
        void OnPageDown(InputAction.CallbackContext context);
    }
}
